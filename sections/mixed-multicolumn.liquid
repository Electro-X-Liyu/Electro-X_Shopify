{{ 'section-multicolumn.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
    /* PC Slider Container */
    .multicolumn-list[data-desktop-slider] {
      display: flex;
      flex-wrap: nowrap;
      overflow: hidden;
      scroll-behavior: smooth;
    }
    /* Visible 3 columns */
    .multicolumn-list__item {
      min-width: calc(33.33% - 20px);
      margin-right: 20px;
      flex-shrink: 0;
    }
    /* Larger side arrows */
    .slider-buttons.desktop-only {
      display: flex;
      justify-content: space-between;
      position: absolute;
      width: calc(100% + 100px);
      left: -50px;
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
    }
    .slider-button--prev.desktop-prev,
    .slider-button--next.desktop-next {
      width: 40px;
      height: 40px;
      pointer-events: auto;
    }
    .slider-button--prev.desktop-prev .svg-wrapper,
    .slider-button--next.desktop-next .svg-wrapper {
      width: 100%;
      height: 100%;
    }
    .slider-button--prev.desktop-prev .icon-wrap,
    .slider-button--next.desktop-next .icon-wrap {
      width: 100%;
      height: 100%;
    }
  }

  /* Mobile slider adjustments */
  @media screen and (max-width: 749px) {
    .slider-buttons.slider-mobile--overlay {
      display: none !important;
    }
    .slider-counter.caption {
      display: none !important;
    }
  }

  /* Original text styling remains unchanged */
  #shopify-section-{{ section.id }} .multicolumn__title .title {
    color: {{ section.settings.title_color }};
    font-size: {{ section.settings.title_size }}px;
    margin-top: {{ section.settings.title_margin_top }}px;
    margin-bottom: {{ section.settings.title_margin_bottom }}px;
  }
  /* ... (rest of original text styling remains the same) ... */
{%- endstyle -%}

{%- liquid
  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = false
  if section.settings.swipe_on_mobile and section.blocks.size > columns_mobile_int
    assign show_mobile_slider = true
  endif
-%}

<div class="multicolumn color-{{ section.settings.color_scheme }} gradient{% unless section.settings.background_style == 'none' and settings.text_boxes_border_thickness > 0 or settings.text_boxes_shadow_opacity > 0 %} background-{{ section.settings.background_style }}{% endunless %}{% if section.settings.title == blank %} no-heading{% endif %}">
  <div
    class="page-width section-{{ section.id }}-padding isolate{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
    {% if settings.animations_reveal_on_scroll %}
      data-cascade
    {% endif %}
  >
    {%- unless section.settings.title == blank -%}
      <div class="title-wrapper-with-link title-wrapper--self-padded-mobile title-wrapper--no-top-margin multicolumn__title">
        <h2 class="title inline-richtext {{ section.settings.heading_size }}">
          {{ section.settings.title }}
        </h2>
        {%- if section.settings.button_label != blank and show_mobile_slider -%}
          <a href="{{ section.settings.button_link }}" class="link underlined-link large-up-hide">
            {{- section.settings.button_label | escape -}}
          </a>
        {%- endif -%}
      </div>
    {%- endunless -%}

    <slider-component class="slider-mobile-gutter">
      {%- if section.blocks.size > 3 -%}
        <div class="slider-buttons desktop-only">
          <button
            type="button"
            class="slider-button slider-button--prev desktop-prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
          >
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
          <button
            type="button"
            class="slider-button slider-button--next desktop-next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
          >
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
        </div>
      {%- endif -%}

      <ul
        class="multicolumn-list contains-content-container grid grid--{{ section.settings.columns_mobile }}-col-tablet-down{% if show_mobile_slider %} slider slider--tablet grid--peek{% endif %}{% if section.blocks.size > 3 %} desktop-slider{% endif %}"
        id="Slider-{{ section.id }}"
        role="list"
        {% if section.blocks.size > 3 %}
          data-desktop-slider
        {% endif %}
      >
        {%- for block in section.blocks -%}
          <li
            id="Slide-{{ section.id }}-{{ forloop.index }}"
            class="multicolumn-list__item grid__item{% if section.settings.swipe_on_mobile %} slider__slide{% endif %}{% if section.settings.column_alignment == 'center' %} center{% endif %}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
            {{ block.shopify_attributes }}
            {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
            {% endif %}
          >
            <div class="multicolumn-card content-container">
              {%- if block.settings.image != blank -%}
                <div class="multicolumn-card__image-wrapper multicolumn-card__image-wrapper--{{ section.settings.image_width }}-width">
                  <div class="media media--transparent media--{{ section.settings.image_ratio }}">
                    {{
                      block.settings.image
                      | image_url: width: 3200
                      | image_tag: loading: 'lazy', class: 'multicolumn-card__image'
                    }}
                  </div>
                </div>
              {%- endif -%}
              <div class="multicolumn-card__info">
                {%- if block.settings.title != blank -%}
                  <h3 class="inline-richtext">{{ block.settings.title }}</h3>
                {%- endif -%}
                {%- if block.settings.text != blank -%}
                  <div class="rte">{{ block.settings.text }}</div>
                {%- endif -%}
                {%- if block.settings.link_label != blank -%}
                  <a
                    class="link animate-arrow"
                    {% if block.settings.link == blank %}
                      role="link" aria-disabled="true"
                    {% else %}
                      href="{{ block.settings.link }}"
                    {% endif %}
                  >
                    {{- block.settings.link_label | escape -}}
                  </a>
                {%- endif -%}
              </div>
            </div>
          </li>
        {%- endfor -%}
      </ul>
    </slider-component>

    <div class="center{% if show_mobile_slider %} small-hide medium-hide{% endif %}">
      {%- if section.settings.button_label != blank -%}
        <a
          class="button button--primary"
          {% if section.settings.button_link == blank %}
            role="link" aria-disabled="true"
          {% else %}
            href="{{ section.settings.button_link }}"
          {% endif %}
        >
          {{ section.settings.button_label | escape }}
        </a>
      {%- endif -%}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const desktopSlider = document.querySelector('[data-desktop-slider]');
    if (!desktopSlider) return;

    const prevBtn = document.querySelector('.desktop-prev');
    const nextBtn = document.querySelector('.desktop-next');
    const itemWidth = document.querySelector('.multicolumn-list__item').offsetWidth + 20;

    prevBtn.addEventListener('click', () => {
      desktopSlider.scrollBy({ left: -itemWidth * 3, behavior: 'smooth' });
    });

    nextBtn.addEventListener('click', () => {
      desktopSlider.scrollBy({ left: itemWidth * 3, behavior: 'smooth' });
    });
  });
</script>

{% schema %}
{
  "name": "Mixed multicolumn",
  "class": "section",
  "settings": [
    /* All original schema settings remain unchanged */
  ],
  "blocks": [
    /* All original block settings remain unchanged */
  ],
  "presets": [
    /* Original presets remain unchanged */
  ]
}
{% endschema %}
