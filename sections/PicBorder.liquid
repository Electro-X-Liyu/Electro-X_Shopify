{% schema %}
{
  "name": "高级图片画廊",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "标题",
      "default": "图片展示"
    },
    {
      "type": "range",
      "id": "desktop_height",
      "label": "PC端图片高度(px)",
      "min": 200,
      "max": 800,
      "step": 10,
      "default": 400
    },
    {
      "type": "range",
      "id": "mobile_height",
      "label": "移动端图片高度(px)",
      "min": 150,
      "max": 500,
      "step": 10,
      "default": 300
    }
  ],
  "blocks": [
    {
      "type": "image_block",
      "name": "图片块",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "图片"
        },
        {
          "type": "url",
          "id": "link",
          "label": "链接"
        },
        {
          "type": "text",
          "id": "alt_text",
          "label": "替代文本",
          "info": "图片描述(SEO优化用)"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "高级图片画廊",
      "category": "图片展示",
      "blocks": [
        {"type": "image_block"},
        {"type": "image_block"},
        {"type": "image_block"},
        {"type": "image_block"},
        {"type": "image_block"}
      ]
    }
  ]
}
{% endschema %}

<div class="advanced-image-gallery" data-section-id="{{ section.id }}">
  {% if section.settings.title != blank %}
    <h2 class="section-title">{{ section.settings.title }}</h2>
  {% endif %}
  
  <div class="gallery-container">
    <!-- PC端网格布局 -->
    <div class="gallery-grid desktop-gallery">
      {% for block in section.blocks %}
        {% if block.settings.image != blank %}
          {% assign aspect_ratio = block.settings.image.aspect_ratio %}
          <div class="image-card" style="--aspect-ratio: {{ aspect_ratio }}; flex: 0 0 calc({{ aspect_ratio }} * {{ section.settings.desktop_height }}px);" {{ block.shopify_attributes }}>
            <a href="{{ block.settings.link | default: '#' }}" class="image-link">
              <div class="image-wrapper" style="height: {{ section.settings.desktop_height }}px;">
                <img src="{{ block.settings.image | img_url: '1200x' }}"
                     alt="{{ block.settings.alt_text | default: 'Image' }}"
                     class="gallery-image"
                     loading="lazy"
                     width="1200"
                     height="{{ 1200 | divided_by: aspect_ratio | round }}">
              </div>
            </a>
          </div>
        {% endif %}
      {% endfor %}
    </div>
    
    <!-- 移动端滑动布局 -->
    <div class="mobile-gallery-container">
      <div class="mobile-slider-wrapper">
        <div class="mobile-slider">
          <!-- 循环滑动需要的副本（前后各加1个） -->
          {% assign last_block = section.blocks.last %}
          {% if last_block.settings.image != blank %}
            {% assign aspect_ratio = last_block.settings.image.aspect_ratio %}
            <div class="mobile-slide" style="width: calc(100vw - 40px); height: {{ section.settings.mobile_height }}px;">
              <a href="{{ last_block.settings.link | default: '#' }}" class="image-link">
                <div class="image-wrapper" style="height: 100%;">
                  <img src="{{ last_block.settings.image | img_url: '800x' }}"
                       alt="{{ last_block.settings.alt_text | default: 'Image' }}"
                       class="gallery-image"
                       loading="lazy"
                       style="width: auto; height: 100%; object-fit: contain;">
                </div>
              </a>
            </div>
          {% endif %}
          
          {% for block in section.blocks %}
            {% if block.settings.image != blank %}
              {% assign aspect_ratio = block.settings.image.aspect_ratio %}
              <div class="mobile-slide" style="width: calc(100vw - 40px); height: {{ section.settings.mobile_height }}px;" data-index="{{ forloop.index0 }}">
                <a href="{{ block.settings.link | default: '#' }}" class="image-link">
                  <div class="image-wrapper" style="height: 100%;">
                    <img src="{{ block.settings.image | img_url: '800x' }}"
                         alt="{{ block.settings.alt_text | default: 'Image' }}"
                         class="gallery-image"
                         loading="lazy"
                         style="width: auto; height: 100%; object-fit: contain;">
                  </div>
                </a>
              </div>
            {% endif %}
          {% endfor %}
          
          {% assign first_block = section.blocks.first %}
          {% if first_block.settings.image != blank %}
            {% assign aspect_ratio = first_block.settings.image.aspect_ratio %}
            <div class="mobile-slide" style="width: calc(100vw - 40px); height: {{ section.settings.mobile_height }}px;">
              <a href="{{ first_block.settings.link | default: '#' }}" class="image-link">
                <div class="image-wrapper" style="height: 100%;">
                  <img src="{{ first_block.settings.image | img_url: '800x' }}"
                       alt="{{ first_block.settings.alt_text | default: 'Image' }}"
                       class="gallery-image"
                       loading="lazy"
                       style="width: auto; height: 100%; object-fit: contain;">
                </div>
              </a>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.advanced-image-gallery {
  max-width: calc(100% - 40px);
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}

.section-title {
  text-align: center;
  margin-bottom: 30px;
  font-size: 28px;
  color: #333;
  position: relative;
  padding-bottom: 15px;
}

.section-title:after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 80px;
  height: 2px;
  background-color: #333;
}

/* PC端样式 */
.gallery-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 33px;
  width: 100%;
  margin: 0 auto;
}

.image-card {
  position: relative;
  transition: transform 0.3s ease;
  margin: 0;
  padding: 0;
}

.image-wrapper {
  position: relative;
  overflow: visible;
  display: flex;
  justify-content: center;
  align-items: center;
  background: transparent;
  width: 100%;
}

.gallery-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  will-change: transform;
}

/* PC端悬停效果 */
.desktop-gallery .image-card:hover .gallery-image {
  transform: scale(1.15);
  z-index: 10;
}

/* 移动端样式 */
.mobile-gallery-container {
  display: none;
  width: 100%;
  position: relative;
  margin: 0 -20px;
}

.mobile-slider-wrapper {
  width: 100%;
  overflow: hidden;
}

.mobile-slider {
  display: flex;
  transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  will-change: transform;
  height: {{ section.settings.mobile_height }}px;
}

.mobile-slide {
  flex: 0 0 calc(100vw - 40px);
  height: 100%;
  scroll-snap-align: start;
  padding: 0 10px;
  box-sizing: border-box;
}

.mobile-slide .image-wrapper {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 响应式切换 */
@media (min-width: 769px) {
  .mobile-gallery-container {
    display: none !important;
  }
}

@media (max-width: 768px) {
  .gallery-grid {
    display: none;
  }
  
  .mobile-gallery-container {
    display: block;
  }
  
  .section-title {
    font-size: 24px;
    margin-bottom: 20px;
  }
}

@media (max-width: 480px) {
  .advanced-image-gallery {
    max-width: 100%;
    padding: 0 20px;
  }
  
  .section-title {
    font-size: 20px;
  }
  
  .mobile-slide {
    flex: 0 0 calc(100vw - 40px);
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const mobileSlider = document.querySelector('.mobile-slider');
  
  if (mobileSlider && mobileSlider.children.length > 3) {
    const slides = Array.from(mobileSlider.children);
    const realSlideCount = slides.length - 2; // 减去前后各1个副本
    const slideWidth = document.querySelector('.mobile-slide').offsetWidth;
    let currentIndex = 1;
    let currentTranslate = -slideWidth * currentIndex;
    let prevTranslate = currentTranslate;
    let isDragging = false;
    let startPos = 0;
    let animationID;
    let velocity = 0;
    let lastTime = 0;
    let isAnimating = false;
    
    // 设置初始位置
    setSliderPosition();
    
    // 触摸事件
    mobileSlider.addEventListener('touchstart', handleTouchStart, { passive: false });
    mobileSlider.addEventListener('touchend', handleTouchEnd, { passive: false });
    mobileSlider.addEventListener('touchmove', handleTouchMove, { passive: false });
    
    // 鼠标事件
    mobileSlider.addEventListener('mousedown', handleMouseStart);
    
    function handleTouchStart(e) {
      startDrag(e.touches[0].clientX);
      e.preventDefault();
    }
    
    function handleTouchMove(e) {
      if (!isDragging) return;
      updateDrag(e.touches[0].clientX);
      e.preventDefault();
    }
    
    function handleTouchEnd() {
      endDrag();
    }
    
    function handleMouseStart(e) {
      startDrag(e.clientX);
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseEnd);
    }
    
    function handleMouseMove(e) {
      if (!isDragging) return;
      updateDrag(e.clientX);
    }
    
    function handleMouseEnd() {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseEnd);
      endDrag();
    }
    
    function startDrag(clientX) {
      if (isAnimating) return;
      
      isDragging = true;
      startPos = clientX;
      prevTranslate = currentTranslate;
      velocity = 0;
      lastTime = performance.now();
      mobileSlider.style.transition = 'none';
      animationID = requestAnimationFrame(animation);
    }
    
    function updateDrag(clientX) {
      const currentPosition = clientX;
      const delta = currentPosition - startPos;
      
      // 计算速度（用于惯性滑动判断）
      const time = performance.now();
      const deltaTime = time - lastTime;
      if (deltaTime > 0) {
        velocity = delta / deltaTime;
      }
      lastTime = time;
      
      // 添加滑动阻力
      currentTranslate = prevTranslate + delta * 0.8;
      setSliderPosition();
    }
    
    function endDrag() {
      if (!isDragging) return;
      isDragging = false;
      cancelAnimationFrame(animationID);
      
      // 根据滑动速度决定是否切换
      const momentumThreshold = 0.3;
      const momentum = velocity * 30;
      
      if (Math.abs(momentum) > momentumThreshold) {
        currentIndex += Math.sign(momentum);
      }
      
      // 循环逻辑
      if (currentIndex < 1) {
        currentIndex = realSlideCount;
      } else if (currentIndex > realSlideCount) {
        currentIndex = 1;
      }
      
      snapToSlide();
    }
    
    function animation() {
      setSliderPosition();
      if (isDragging) {
        animationID = requestAnimationFrame(animation);
      }
    }
    
    function setSliderPosition() {
      mobileSlider.style.transform = `translateX(${currentTranslate}px)`;
    }
    
    function snapToSlide() {
      isAnimating = true;
      const targetTranslate = -slideWidth * currentIndex;
      const distance = targetTranslate - currentTranslate;
      const duration = Math.min(500, 300 + Math.abs(distance) * 0.3); // 动态计算动画时间
      
      mobileSlider.style.transition = `transform ${duration}ms cubic-bezier(0.25, 0.46, 0.45, 0.94)`;
      currentTranslate = targetTranslate;
      setSliderPosition();
      
      const onTransitionEnd = () => {
        mobileSlider.removeEventListener('transitionend', onTransitionEnd);
        isAnimating = false;
        
        // 滑动结束后检查是否需要重置位置（实现无缝循环）
        if (currentIndex === 0) {
          currentIndex = realSlideCount;
          mobileSlider.style.transition = 'none';
          currentTranslate = -slideWidth * currentIndex;
          setSliderPosition();
        } else if (currentIndex === realSlideCount + 1) {
          currentIndex = 1;
          mobileSlider.style.transition = 'none';
          currentTranslate = -slideWidth * currentIndex;
          setSliderPosition();
        }
      };
      
      mobileSlider.addEventListener('transitionend', onTransitionEnd);
    }
  }
});
</script>