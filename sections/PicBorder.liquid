{% schema %}
{
  "name": "高级图片画廊",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "标题",
      "default": "图片展示"
    },
    {
      "type": "range",
      "id": "desktop_height",
      "label": "PC端图片高度(px)",
      "min": 200,
      "max": 800,
      "step": 10,
      "default": 400
    },
    {
      "type": "range",
      "id": "mobile_height",
      "label": "移动端图片高度(px)",
      "min": 150,
      "max": 500,
      "step": 10,
      "default": 300
    }
  ],
  "blocks": [
    {
      "type": "image_block",
      "name": "图片块",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "图片"
        },
        {
          "type": "url",
          "id": "link",
          "label": "链接"
        },
        {
          "type": "text",
          "id": "alt_text",
          "label": "替代文本",
          "info": "图片描述(SEO优化用)"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "高级图片画廊",
      "category": "图片展示",
      "blocks": [
        {"type": "image_block"},
        {"type": "image_block"},
        {"type": "image_block"},
        {"type": "image_block"},
        {"type": "image_block"}
      ]
    }
  ]
}
{% endschema %}

<div class="advanced-image-gallery" data-section-id="{{ section.id }}">
  {% if section.settings.title != blank %}
    <h2 class="section-title">{{ section.settings.title }}</h2>
  {% endif %}
  
  <div class="gallery-container">
    <!-- PC端网格布局 -->
    <div class="gallery-grid desktop-gallery">
      {% for block in section.blocks %}
        {% if block.settings.image != blank %}
          {% assign aspect_ratio = block.settings.image.aspect_ratio %}
          <div class="image-card" style="--aspect-ratio: {{ aspect_ratio }}; flex: 0 0 calc({{ aspect_ratio }} * {{ section.settings.desktop_height }}px);" {{ block.shopify_attributes }}>
            <a href="{{ block.settings.link | default: '#' }}" class="image-link">
              <div class="image-wrapper" style="height: {{ section.settings.desktop_height }}px;">
                <img src="{{ block.settings.image | img_url: '1200x' }}"
                     alt="{{ block.settings.alt_text | default: 'Image' }}"
                     class="gallery-image"
                     loading="lazy"
                     width="1200"
                     height="{{ 1200 | divided_by: aspect_ratio | round }}">
              </div>
            </a>
          </div>
        {% endif %}
      {% endfor %}
    </div>
    
    <!-- 移动端滑动布局 -->
    <div class="mobile-gallery-container">
      <div class="mobile-slider">
        <!-- 循环滑动需要的副本（前后各加1个） -->
        {% assign last_block = section.blocks.last %}
        {% if last_block.settings.image != blank %}
          {% assign aspect_ratio = last_block.settings.image.aspect_ratio %}
          <div class="mobile-slide" style="width: calc({{ aspect_ratio }} * {{ section.settings.mobile_height }}px);">
            <a href="{{ last_block.settings.link | default: '#' }}" class="image-link">
              <div class="image-wrapper" style="height: {{ section.settings.mobile_height }}px;">
                <img src="{{ last_block.settings.image | img_url: '800x' }}"
                     alt="{{ last_block.settings.alt_text | default: 'Image' }}"
                     class="gallery-image"
                     loading="lazy"
                     width="800"
                     height="{{ 800 | divided_by: aspect_ratio | round }}">
              </div>
            </a>
          </div>
        {% endif %}
        
        {% for block in section.blocks %}
          {% if block.settings.image != blank %}
            {% assign aspect_ratio = block.settings.image.aspect_ratio %}
            <div class="mobile-slide" style="width: calc({{ aspect_ratio }} * {{ section.settings.mobile_height }}px);" data-index="{{ forloop.index0 }}">
              <a href="{{ block.settings.link | default: '#' }}" class="image-link">
                <div class="image-wrapper" style="height: {{ section.settings.mobile_height }}px;">
                  <img src="{{ block.settings.image | img_url: '800x' }}"
                       alt="{{ block.settings.alt_text | default: 'Image' }}"
                       class="gallery-image"
                       loading="lazy"
                       width="800"
                       height="{{ 800 | divided_by: aspect_ratio | round }}">
                </div>
              </a>
            </div>
          {% endif %}
        {% endfor %}
        
        {% assign first_block = section.blocks.first %}
        {% if first_block.settings.image != blank %}
          {% assign aspect_ratio = first_block.settings.image.aspect_ratio %}
          <div class="mobile-slide" style="width: calc({{ aspect_ratio }} * {{ section.settings.mobile_height }}px);">
            <a href="{{ first_block.settings.link | default: '#' }}" class="image-link">
              <div class="image-wrapper" style="height: {{ section.settings.mobile_height }}px;">
                <img src="{{ first_block.settings.image | img_url: '800x' }}"
                     alt="{{ first_block.settings.alt_text | default: 'Image' }}"
                     class="gallery-image"
                     loading="lazy"
                     width="800"
                     height="{{ 800 | divided_by: aspect_ratio | round }}">
              </div>
            </a>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<style>
.advanced-image-gallery {
  max-width: calc(100% - 40px);
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}

.section-title {
  text-align: center;
  margin-bottom: 30px;
  font-size: 28px;
  color: #333;
  position: relative;
  padding-bottom: 15px;
}

.section-title:after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 80px;
  height: 2px;
  background-color: #333;
}

/* PC端样式 */
.gallery-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 33px;
  width: 100%;
  margin: 0 auto;
}

.image-card {
  position: relative;
  transition: transform 0.3s ease;
  margin: 0;
  padding: 0;
}

.image-wrapper {
  position: relative;
  overflow: visible;
  display: flex;
  justify-content: center;
  align-items: center;
  background: transparent;
  width: 100%;
}

.gallery-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  will-change: transform;
}

/* PC端悬停效果 */
.desktop-gallery .image-card:hover .gallery-image {
  transform: scale(1.15);
  z-index: 10;
}

/* 移动端样式 */
.mobile-gallery-container {
  display: none;
  width: 100%;
  overflow: hidden;
  position: relative;
}

.mobile-slider {
  display: flex;
  transition: transform 0.5s ease;
  will-change: transform;
}

.mobile-slide {
  flex-shrink: 0;
  margin-right: 33px;
  scroll-snap-align: start;
}

.mobile-slide .image-wrapper {
  overflow: hidden;
}

/* 响应式切换 */
@media (min-width: 769px) {
  .mobile-gallery-container {
    display: none !important;
  }
}

@media (max-width: 768px) {
  .gallery-grid {
    display: none;
  }
  
  .mobile-gallery-container {
    display: block;
  }
  
  .section-title {
    font-size: 24px;
    margin-bottom: 20px;
  }
}

@media (max-width: 480px) {
  .advanced-image-gallery {
    max-width: calc(100% - 20px);
    padding: 0 10px;
  }
  
  .section-title {
    font-size: 20px;
  }
  
  .mobile-slide {
    margin-right: 20px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const mobileSlider = document.querySelector('.mobile-slider');
  
  if (mobileSlider && mobileSlider.children.length > 3) {
    const slides = Array.from(mobileSlider.children);
    const realSlideCount = slides.length - 2; // 减去前后各1个副本
    const slideWidth = slides[1].offsetWidth + 33; // 取第一个真实slide的宽度
    
    // 初始化位置（定位到第一个真实slide）
    let currentIndex = 1;
    mobileSlider.style.transform = `translateX(${-slideWidth * currentIndex}px)`;
    
    let isDragging = false;
    let startPos = 0;
    let currentTranslate = -slideWidth * currentIndex;
    let prevTranslate = currentTranslate;
    let animationID;
    let velocity = 0;
    let lastTime = 0;
    
    // 触摸事件
    mobileSlider.addEventListener('touchstart', touchStart);
    mobileSlider.addEventListener('touchend', touchEnd);
    mobileSlider.addEventListener('touchmove', touchMove);
    
    // 鼠标事件
    mobileSlider.addEventListener('mousedown', touchStart);
    mobileSlider.addEventListener('mouseup', touchEnd);
    mobileSlider.addEventListener('mouseleave', touchEnd);
    mobileSlider.addEventListener('mousemove', touchMove);
    
    function touchStart(e) {
      isDragging = true;
      startPos = getPositionX(e);
      animationID = requestAnimationFrame(animation);
      mobileSlider.style.transition = 'none';
      lastTime = performance.now();
      velocity = 0;
    }
    
    function touchEnd() {
      isDragging = false;
      cancelAnimationFrame(animationID);
      
      // 根据滑动速度决定是否切换
      const momentumThreshold = 0.3;
      const momentum = velocity * 30;
      
      if (Math.abs(momentum) > momentumThreshold) {
        currentIndex += Math.sign(momentum);
      }
      
      // 循环逻辑
      if (currentIndex < 1) {
        currentIndex = realSlideCount;
      } else if (currentIndex > realSlideCount) {
        currentIndex = 1;
      }
      
      snapToSlide();
    }
    
    function touchMove(e) {
      if (isDragging) {
        const currentPosition = getPositionX(e);
        const delta = currentPosition - startPos;
        
        // 计算速度（用于惯性滑动判断）
        const time = performance.now();
        const deltaTime = time - lastTime;
        if (deltaTime > 0) {
          velocity = delta / deltaTime;
        }
        lastTime = time;
        
        currentTranslate = prevTranslate + delta;
        setSliderPosition();
      }
    }
    
    function animation(time) {
      if (isDragging) {
        setSliderPosition();
        animationID = requestAnimationFrame(animation);
      }
    }
    
    function setSliderPosition() {
      mobileSlider.style.transform = `translateX(${currentTranslate}px)`;
    }
    
    function snapToSlide() {
      prevTranslate = currentTranslate = -slideWidth * currentIndex;
      mobileSlider.style.transition = 'transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
      setSliderPosition();
      
      // 滑动结束后检查是否需要重置位置（实现无缝循环）
      const resetPosition = () => {
        mobileSlider.removeEventListener('transitionend', resetPosition);
        
        if (currentIndex === 0) {
          currentIndex = realSlideCount;
        } else if (currentIndex === realSlideCount + 1) {
          currentIndex = 1;
        } else {
          return;
        }
        
        mobileSlider.style.transition = 'none';
        prevTranslate = currentTranslate = -slideWidth * currentIndex;
        setSliderPosition();
      };
      
      mobileSlider.addEventListener('transitionend', resetPosition);
    }
    
    function getPositionX(e) {
      return e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
    }
  }
});
</script>